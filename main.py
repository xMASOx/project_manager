from logic import DB_Manager
from config import *
from telebot import TeleBot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telebot import types

bot = TeleBot(TOKEN)
hideBoard = types.ReplyKeyboardRemove()

cancel_button = "–û—Ç–º–µ–Ω–∞ üö´"

#–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
def cansel(message):
    bot.send_message(message.chat.id, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π /info", reply_markup=hideBoard)

#–û—Ç–≤–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤
def no_projects(message):
    bot.send_message(message.chat.id, 'üòï –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤!\n–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /new_project')

#–ì–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def gen_inline_markup(rows):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    for row in rows:
        markup.add(InlineKeyboardButton(row, callback_data=row))
    return markup

#–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def gen_markup(rows):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)  # üîÑ –°–∫—Ä—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    markup.row_width = 1
    for row in rows:
        markup.add(KeyboardButton(row))
    markup.add(KeyboardButton(cancel_button))
    return markup

attributes_of_projects = {
    '–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞': ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞", "project_name"],
    "–û–ø–∏—Å–∞–Ω–∏–µ": ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "description"],
    "–°—Å—ã–ª–∫–∞": ["–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç", "url"],
    "–°—Ç–∞—Ç—É—Å": ["–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏", "status_id"]
}

#–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
def info_project(message, user_id, project_name):
    info = manager.get_project_info(user_id, project_name)[0]
    skills = manager.get_project_skills(project_name)
    if not skills:
        skills = '‚õî –ù–∞–≤—ã–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã'
    bot.send_message(message.chat.id, f"""üìÅ *{info[0]}*
üìù *–û–ø–∏—Å–∞–Ω–∏–µ*: {info[1]}
üîó *–°—Å—ã–ª–∫–∞*: {info[2]}
üìä *–°—Ç–∞—Ç—É—Å*: {info[3]}
üí° *–ù–∞–≤—ã–∫–∏*: {skills}
""", parse_mode="Markdown")


#–•–µ–Ω–¥–ª–µ—Ä /start
@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤.
–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö!""")
    info(message)

#–•–µ–Ω–¥–ª–µ—Ä /info ‚Äì –ø–æ–º–æ—â—å
@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(message.chat.id,
"""
üõ† *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*:
/new_project ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
/skills ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –∫ –ø—Ä–æ–µ–∫—Ç—É
/projects ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
/update_projects ‚Äì –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
/delete ‚Äì —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
/info ‚Äì –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üìå –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –≤–≤–µ—Å—Ç–∏ *–∏–º—è –ø—Ä–æ–µ–∫—Ç–∞*, –∏ —è –ø–æ–∫–∞–∂—É –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ!

–î–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É *–û—Ç–º–µ–Ω–∞ üö´*
""", parse_mode='Markdown')

#–•–µ–Ω–¥–ª–µ—Ä /new_project ‚Äì –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(commands=['new_project'])
def addtask_command(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
    bot.register_next_step_handler(message, name_project)

def name_project(message):
    name = message.text
    user_id = message.from_user.id
    data = [user_id, name]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç")
    bot.register_next_step_handler(message, link_project, data=data)

def link_project(message, data):
    data.append(message.text)
    statuses = [x[0] for x in manager.get_statuses()]
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞:", reply_markup=gen_markup(statuses))
    bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)

def callback_project(message, data, statuses):
    status = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if int(status) not in statuses:
        bot.send_message(message.chat.id, "‚ùó –¢—ã –≤—ã–±—Ä–∞–ª —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!", reply_markup=gen_markup(statuses))
        bot.register_next_step_handler(message, callback_project, data=data, statuses=statuses)
        return
    status_id = manager.get_status_id(int(status))
    data.insert(2, '')  # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ
    data.append(status_id)
    manager.insert_project([tuple(data)])
    bot.send_message(message.chat.id, "‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

#–•–µ–Ω–¥–ª–µ—Ä /skills ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
@bot.message_handler(commands=['skills'])
def skill_handler(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫:', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    else:
        no_projects(message)

def skill_project(message, projects):
    project_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if project_name not in projects:
        bot.send_message(message.chat.id, '‚ùó –¢–∞–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, skill_project, projects=projects)
    else:
        skills = [x[1] for x in manager.get_skills()]
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –Ω–∞–≤—ã–∫:', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)

def set_skill(message, project_name, skills):
    skill = message.text
    user_id = message.from_user.id
    if message.text == cancel_button:
        cansel(message)
        return
    if skill not in skills:
        bot.send_message(message.chat.id, '‚ùó –ù–∞–≤—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:', reply_markup=gen_markup(skills))
        bot.register_next_step_handler(message, set_skill, project_name=project_name, skills=skills)
        return
    manager.insert_skill(user_id, project_name, skill)
    bot.send_message(message.chat.id, f'üí° –ù–∞–≤—ã–∫ *{skill}* –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø—Ä–æ–µ–∫—Ç—É *{project_name}*', parse_mode='Markdown')

#–•–µ–Ω–¥–ª–µ—Ä /projects ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
@bot.message_handler(commands=['projects'])
def get_projects(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        text = "\n".join([f"üìÅ *{x[2]}*\nüîó {x[4]}\n" for x in projects])
        bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=gen_inline_markup([x[2] for x in projects]))
    else:
        no_projects(message)

#–•–µ–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏–π –ø–æ inline-–∫–Ω–æ–ø–∫–∞–º
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    project_name = call.data
    info_project(call.message, call.from_user.id, project_name)

#–•–µ–Ω–¥–ª–µ—Ä /delete ‚Äì —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
@bot.message_handler(commands=['delete'])
def delete_handler(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        text = "\n".join([f"üóÇ {x[2]}\nüîó {x[4]}\n" for x in projects])
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, text, reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, delete_project, projects=projects)
    else:
        no_projects(message)

def delete_project(message, projects):
    project = message.text
    user_id = message.from_user.id
    if message.text == cancel_button:
        cansel(message)
        return
    if project not in projects:
        bot.send_message(message.chat.id, '‚ùó –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!', reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, delete_project, projects=projects)
        return
    project_id = manager.get_project_id(project, user_id)
    manager.delete_project(user_id, project_id)
    bot.send_message(message.chat.id, f'üóë –ü—Ä–æ–µ–∫—Ç *{project}* —É–¥–∞–ª–µ–Ω!', parse_mode="Markdown")

#–•–µ–Ω–¥–ª–µ—Ä /update_projects ‚Äì –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
@bot.message_handler(commands=['update_projects'])
def update_project(message):
    user_id = message.from_user.id
    projects = manager.get_projects(user_id)
    if projects:
        projects = [x[2] for x in projects]
        bot.send_message(message.chat.id, "üîÑ –í—ã–±–µ—Ä–∏ –ø—Ä–æ–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects)
    else:
        no_projects(message)

def update_project_step_2(message, projects):
    project_name = message.text
    if message.text == cancel_button:
        cansel(message)
        return
    if project_name not in projects:
        bot.send_message(message.chat.id, "‚ùó –ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Å–Ω–æ–≤–∞:", reply_markup=gen_markup(projects))
        bot.register_next_step_handler(message, update_project_step_2, projects=projects)
        return
    bot.send_message(message.chat.id, "‚öôÔ∏è –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=gen_markup(attributes_of_projects.keys()))
    bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)

def update_project_step_3(message, project_name):
    attribute = message.text
    reply_markup = None
    if message.text == cancel_button:
        cansel(message)
        return
    if attribute not in attributes_of_projects.keys():
        bot.send_message(message.chat.id, "‚ùó –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=gen_markup(attributes_of_projects.keys()))
        bot.register_next_step_handler(message, update_project_step_3, project_name=project_name)
        return
    elif attribute == "–°—Ç–∞—Ç—É—Å":
        rows = manager.get_statuses()
        reply_markup = gen_markup([x[0] for x in rows])
    bot.send_message(message.chat.id, attributes_of_projects[attribute][0], reply_markup=reply_markup)
    bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attributes_of_projects[attribute][1])

def update_project_step_4(message, project_name, attribute):
    update_info = message.text
    if attribute == "status_id":
        rows = manager.get_statuses()
        if update_info in [x[0] for x in rows]:
            update_info = manager.get_status_id(update_info)
        elif update_info == cancel_button:
            cansel(message)
            return
        else:
            bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑:", reply_markup=gen_markup([x[0] for x in rows]))
            bot.register_next_step_handler(message, update_project_step_4, project_name=project_name, attribute=attribute)
            return
    user_id = message.from_user.id
    data = (update_info, project_name, user_id)
    manager.update_projects(attribute, data)
    bot.send_message(message.chat.id, "‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–Ω–µ—Å–µ–Ω—ã!")

#–§–æ–ª–±—ç–∫: —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(func=lambda message: True)
def text_handler(message):
    user_id = message.from_user.id
    projects = [x[2] for x in manager.get_projects(user_id)]
    project = message.text
    if project in projects:
        info_project(message, user_id, project)
    else:
        bot.reply_to(message, "üîç –¢–µ–±–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?")
        info(message)

#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    manager = DB_Manager(DATABASE)
    bot.infinity_polling()
